package baseGame.Rendering;

import java.awt.Color;
import java.awt.Polygon;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public class RGBImage {
	private BufferedImage rgbBufferedImage;
	
	private int[] rgbPixels;
	
	private int canvasWidth;
	private int canvasHeight;
	public int getWidth() {
		return canvasWidth;
	}

	public int getHeight() {
		return canvasHeight;
	}


	public RGBImage(File file){
		
		
		BufferedImage img = null;
		
		try {
			img= ImageIO.read(file);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		if(img.getType() != BufferedImage.TYPE_INT_RGB){
		rgbBufferedImage = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);
		
		rgbBufferedImage.getGraphics().drawImage(img ,0, 0, img.getWidth(), img.getHeight(),Color.white,null);
		}else{
			rgbBufferedImage = img;
		}
		canvasWidth= img.getWidth();
		canvasHeight = img.getHeight();
		rgbPixels = ((DataBufferInt)rgbBufferedImage.getRaster().getDataBuffer()).getData();
		
		
		
	}
	
	public void DrawRGBImage(int[] pixels,int x,int y, int width, int height){
		
		int realY = y*canvasWidth;
		
		if(x>=0 && y>=0 && y<= canvasHeight && x<=canvasWidth){
			
			for(int i =0;i<height;i++){
				System.out.println(height);
				for(int j = 0;j<width;j++){
					int adr = realY +x+ i*canvasWidth + j ;
				
					if(adr < rgbPixels.length){
					rgbPixels[adr] = pixels[i*width +j];
				
					}else{
						break;
					}
						
					
				}
			}
		
			}
		
	
	}
	//Midtpoint circle algorithm. Hentet fra wikipedia
	//http://en.wikipedia.org/wiki/Midpoint_circle_algorithm
	
	public void setColorInCircle(int color,int x0,int y0, int radius){
		int f = 1 - radius;
		  int ddF_x = 1;
		  int ddF_y = -2 * radius;
		  int x = 0;
		  int y = radius;
		 
		  setPixel(color,x0, y0 + radius);
		  setPixel(color,x0, y0 - radius);
		  setPixel(color,x0 + radius, y0);
		  setPixel(color,x0 - radius, y0);
		 
		  while(x < y)
		  {
		   
		    if(f >= 0) 
		    {
		      y--;
		      ddF_y += 2;
		      f += ddF_y;
		    }
		    x++;
		    ddF_x += 2;
		    f += ddF_x;    
		    setPixel(color,x0 + x, y0 + y);
		    setPixel(color,x0 - x, y0 + y);
		    setPixel(color,x0 + x, y0 - y);
		    setPixel(color,x0 - x, y0 - y);
		    setPixel(color,x0 + y, y0 + x);
		    setPixel(color,x0 - y, y0 + x);
		    setPixel(color,x0 + y, y0 - x);
		    setPixel(color,x0 - y, y0 - x);
		  }
		
		
	}
	public void setPixel(int color,int x, int y){
		if(x>=0 && y>=0 && y<= canvasHeight && x<=canvasWidth){
		rgbPixels[canvasWidth*y + x] = color;
		}
	}
	Polygon poly = new Polygon();
	
	public BufferedImage getRgbBufferedImage() {
		return rgbBufferedImage;
	}
	

	public int[] getPixels() {
		return rgbPixels;
	}
	

}
