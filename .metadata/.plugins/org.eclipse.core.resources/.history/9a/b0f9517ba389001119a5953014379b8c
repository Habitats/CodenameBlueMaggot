package baseGame;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;

import java.awt.image.BufferStrategy;


import entity.Entity;

public abstract class BaseGame extends Canvas implements Runnable {

	private Thread runLoop;
	private BufferStrategy buffer;
	private boolean showFps = true;
	private long lastTime;
	private double fps;
	private int width = 800;
	private int height = 600;
	private Color backgroundColor = Color.cyan;
	public void setBackgroundColor(Color backgroundColor) {
		this.backgroundColor = backgroundColor;
	}

	private Rectangle gameRect;
	public void init(double fps) {
		this.fps = fps;
		gameRect = new Rectangle(0,0,width,height);
		setIgnoreRepaint(true);
		createBufferStrategy(2);
		buffer = getBufferStrategy();

		runLoop = new Thread(this);
		lastTime = System.currentTimeMillis();
		runLoop.run();

	}

	@Override
	public void run() {
		
		while (true){
		long deltaTime1 = System.currentTimeMillis() - lastTime;
		
		try {
			Thread.sleep(2);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(deltaTime1 < 1000/fps) continue;
		
		onUpdate(deltaTime1);
		long deltaTime2 = System.currentTimeMillis() - lastTime;
		Renderer renderer = new Renderer();
		
		onDraw(renderer);	
		Graphics2D g = (Graphics2D) buffer.getDrawGraphics();
		g.setColor(backgroundColor);
		
		g.fillRect(0, 0, width, height);
		for(Renderable renderable: renderer.getToBeDrawn()){
			
			
			
			switch (renderable.getRenderType()) {
			case BUFFEREDIMAGE:
				DrawBuffImage(g, renderable);
				break;
			case CIRCLE:
				
			default:
				break;
			}
			
			

			}

			if (showFps)
				DrawfpsCounter(g, deltaTime2);

			buffer.show();
			g.dispose();
			lastTime = System.currentTimeMillis();

		}
	}
	private boolean onScreen(int x,int y,int width,int height){
		Rectangle rect = new Rectangle(x,y,width,height);
		return gameRect.intersects(rect);
		
		
	}
	
	private boolean onScreen(int x,int y,int radius){
		return true;
	}
	private void DrawCircle(Graphics2D, Renderable renderable){
		
		
	}
	private void DrawBuffImage(Graphics2D g,Renderable renderable){
		if(onScreen(renderable.getX(), renderable.getY(), renderable.getWidth(), renderable.getHeight()))
			g.drawImage(renderable.getImg(),renderable.getX() , renderable.getY(), renderable.getWidth(), renderable.getHeight(), Color.black, null);
	}
	private void DrawfpsCounter(Graphics2D g, long deltaTime) {
		String fpsCounter = "FPS: " + (1000 / (int) deltaTime);
		g.drawChars(fpsCounter.toCharArray(), 0, fpsCounter.length(), 10, 10);
	}
	
	public abstract void onUpdate(long deltaTime);

	public abstract void onDraw(Renderer renderer);

}
