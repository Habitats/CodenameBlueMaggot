package baseGame.Rendering;

import java.awt.Color;
import java.awt.Polygon;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public class RGBImage {
	private BufferedImage rgbBufferedImage;
	
	private int[] rgbPixels;
	
	private int canvasWidth;
	private int canvasHeight;
	public int getWidth() {
		return canvasWidth;
	}

	public int getHeight() {
		return canvasHeight;
	}


	public RGBImage(File file){
		
		
		BufferedImage img = null;
		
		try {
			img= ImageIO.read(file);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		if(img.getType() != BufferedImage.TYPE_INT_RGB){
		rgbBufferedImage = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);
		
		rgbBufferedImage.getGraphics().drawImage(img ,0, 0, img.getWidth(), img.getHeight(),Color.white,null);
		}else{
			rgbBufferedImage = img;
		}
		//width = img.getWidth();
		//height = img.getHeight();
		rgbPixels = ((DataBufferInt)rgbBufferedImage.getRaster().getDataBuffer()).getData();
		
		
		
	}
	
	public void DrawRGBImage(int[] pixels,int x,int y, int width, int height){
		
		int realY = y*canvasWidth;
		
		if(x>=0 && y>=0 && y<= canvasHeight && x<=canvasWidth){
			
			for(int i =0;i<height;i++){
				for(int j = 0;j<width;j++){
					int adr = realY +x+ i*canvasWidth + j ;
					if(adr < rgbPixels.length){
					rgbPixels[adr] = pixels[i*width +j];
					
					}else{
						break;
					}
						
					
				}
			}
		
			}
		
	
	}
	
	Polygon poly = new Polygon();
	
	public BufferedImage getRgbBufferedImage() {
		return rgbBufferedImage;
	}
	

	public int[] getPixels() {
		return rgbPixels;
	}
	

}
