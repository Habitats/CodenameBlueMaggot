package baseGame.Rendering;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.util.ArrayList;

import baseGame.Renderable;

import entity.Entity;


public class Renderer {

	public ArrayList<Renderable> getToBeDrawn() {
		return toBeDrawn;
	}
	
	private ArrayList<Renderable> toBeDrawn;	
	private int canvasWidth;
	private int canvasHeight;
	private int[] rgbPixels;
	public Renderer(int[] rgbPixels,int canvasWidth,int canvasHeight){
		this.rgbPixels = rgbPixels;
		this.canvasWidth = canvasWidth;
		this.canvasHeight = canvasHeight;
		toBeDrawn = new ArrayList<Renderable>();
	}
	
	public void DrawImage(RGBImage img,int x,int y,int width,int height){
		
		
		
		DrawPixelArrayRGB(img.getPixels(), x, y, width, height);
		
	}
	
	public void DrawPixelArrayRGB(int[] pixels,int x,int y, int width, int height){
		if(x>=0 && y>=0 && y<= canvasHeight && x<=canvasWidth){
			
			for(int i =0;i<height;i++){
				for(int j = 0;j<width;j++){
					if(y*canvasWidth +x+ i*canvasWidth + j < rgbPixels.length){
					rgbPixels[(y)*canvasWidth +x+ i*canvasWidth + j] = pixels[i*width +j];
					
					}else{
						break;
					}
						
					
				}
			}
		
			}
		
	}
	public void DrawPixelArrayRGB(int[] pixels,int transparentColor,int x,int y, int width, int height){
		if(x>=0 && y>=0 && y<= canvasHeight && x<=canvasWidth){
			
			for(int i =0;i<height;i++){
				for(int j = 0;j<width;j++){
					if(y*canvasWidth +x+ i*canvasWidth + j < rgbPixels.length){
						int c = pixels[i*width +j];
						if(c !=transparentColor){
						c = rgbPixels[(y)*canvasWidth +x+ i*canvasWidth + j] ;
						}
					}else{
						break;
					}
						
					
				}
			}
		
			}
		
	}
	public void DrawCircle(int x,int y,int radius,Color color){
		toBeDrawn.add(new Renderable(x, y, radius, color));
	}
	public void clearAllPixelData(Color clearColor){
		int transparentColor = clearColor.getRGB();
		for(int i =0;i<rgbPixels.length;i++){
			if(rgbPixels[i] !=transparentColor){
				rgbPixels[i] = transparentColor;
			}
		}
	}
}
